naraku2

--------------------------------------------
naraku-utils

--------------------------------------------
naraku2-dataHub

Fetcher

Emitter
	on => off
	once
	off
	emit
	logHandle() => udFun
	


DataHub(dhConfig)
	_key
	_data
	_status
	_lockStack
	_emitter
	_controller
	_destroyed
	_dhConfig	
	_errorMsg
	logHandle()
	_init()
		_controller = new Controller(this)
		
	fetchData(...args)
		_controller.fetchData(...args)
	
	statusList undefined set loading locked error
	
	changeHandler ({name,type,value})
		
	public
		createController()	
		stopFetchData(name);
		
		get(name)
		getError(name)
		getFirst(name, defaultValue = {})
		assignFirst(name)
		
		set(name, value)
			_errorMsg = null
			$$data:
		setStatus(name, value)
			$$status:
		getStatus(name)
		
		hasData(name)
		
		lock(name)
		unLock(name)
		
		isLoading()
		isReady()
		isLocked()
		
		destroy()
			$$destroy:dataHub _key
		
	config
		$name
		fetcher
		dependence
		filter
		
		off
		
		clear
		reset
		snapshot
		
		pagination
			fetcher
			sizeField
			pageField
			pageStart
		
		default
		
		name: [default]
	
Controller(dh)
	_key
	_dh
	_emitter = dh._emitter
	_willUpdate
	_refreshInterval
	_runner
	_destroyed
	_fetchTimeoutList
	_fetchingMap
	

	public
		on()
		once()
		when()
		whenAll()
		emit()
		
		register(name, callback)
		run(name,...args)
		
		watch()
			dh._onChange

		destroy()
			clearTimeout
			clearTimeout _fetchingMap
			stopFetch()
			$$destroy:controller _key
		
		stopFetch(stopKey);
		fetchData(name, param, dataInfo, stopKey)
			if fetching narakuError
			clearTimeout
		

--------------------------------------------
naraku2-transformer

--------------------------------------------
naraku2-declare

--------------------------------------------
naraku2-codeTemplate

--------------------------------------------
naraku2-viewModel

ViewModel

	gDh
	cDh
	dh
	
	_key
	_name
	_type
	_destroyed
	rendered
	
	afterCreate()
	beforeRender()
	afterRender()
	beforeDestruct()
	
	view
		showDevLog()
		
		log()
		
		getValue()
		setValue()
		assignFirst()
		getFirst()
		when()
		run()
		
		getPrivateValue()
		setPrivateValue()
		assignPrivateFirst()
		getPrivateFirst()
		whenPrivate()

		getGlobalValue()
		setGlobalValue()
		assignGlobalFirst()
		getGlobalFirst()
		whenGlobal()

@createView($name/dhCfg)

@publicMethod

NodeModel
	_root: {}
	_parent
	_last
	_nameMap
	_keyMap
	
	getRoot()
	getPath()
	getParent()
	getLast()
	
	findByName()
	findByKey()
	
	asRoot()
	asParent()
	
	addMe(key, name, type, attr)
	
	parentNode
		{
			key:
			name:
			type:
			attr:
			children:
			parent:
		}

ContextViewModel

		contextModel		
			cDh
			nodeModel
			

	view
		contextView = true

ViewModel.createView


--------------------------------------------
naraku2-forVue2x
--------------------------------------------
naraku2-forReact
--------------------------------------------
naraku2-forVue3x

===================================================


@showLoading

@createPage($name/dhCfg)
@createForm($name/dhCfg)

PageViewModel

	themes app -> menu -> page

	view
		addHeaderLeft()
		addHeaderRight()
		addHeaderCenter()
		
		setHeader()
		
		getModuleAuthority();
		getAllAuthority();
		getAppAuthority();
		
		toPage(path, param)
		
		getPageParam() =>
			param
			routerParam
			urlParam
			requestParam

FormViewModel

	view
		setFormData()		
		setFieldValue()
		deleteField()
		getFormData()
		
		getErrorMsg();
		getFieldProps(label/field, type=label/field);
		
		formatter() = same;
		
		notifyErrorMsg();
		itemRender();
		
	fieldProps
		field
			field
			value
			none
			inputType
			errorMsg
		init
			isInit
			exceptValue
			disabledValue
		select
			muti
			onFetchSource
			initSourceData
			sourceData
			valueField
			labelField
		input
			placeholder
			className
			style
			value
			onChange
			disabled
		extend


	public
		checkFields({label,field,value}, formData)
		resetFormData()
		getSubmitData()
		setFormValueX(declare, updateInit)
		lockForm()
		unlockForm()
		
	LsForm 
		props
			declare
			itemRender
			formatter

TableViewModel
		view
			declareColumns()
			getColumns()
			
		public
			selectRow
			selectAll
			selectNone
			resetData
			getChangedRow
			
		props
			columnsDeclare
				label: field@width@min@max@sort~asc/desc/number@filter~enum|search => render@attr;
			colWidthByFont
			scrollXByColWidth
			
			menu
			server
			select
			
			asSelect		
			value
			onChange
			
			defaultPageSize
			
			onChangePage
			onChangPageSize
			onChangeFilter
			onChangeMatch
			onChangeSorter
			
			onSelect
			
			onExpendAll
			onExpendColumns
			
			onDetail
			
			subTable
			
			renderMap
			
TabsViewModel
		
		

		props
			switchData
			
SelectViewModel
		modalRender({
			extend,
			muti
			disabledValue
			tempSourceData
			tempValue
			valueField
			labelField
			setUpdate(value, sourceData)
		})
		
		props
			muti
			modal
			onFetchSource
			initSourceData
			sourceData
			valueField
			labelField
			labelFormatter
			extend


LayoutViewModel
	theme
	screen

	
SliderMenuViewModel

	view
	
		getMenuData() =>
			{
				label
				icon
				path
				meta
				childMenus
			}
		
		config
			{
				theme
				icon
				path
				name
				label
				dynamic
				detail
				hidden
				routes[]
			}
-------------------------------------------------------------------			
AppModel
	
	config
		name
		theme
		layout
		404
		401
		500
	

AuthorityModel

	getAuthority
		app.menu.page: module1,module2
		
	

-------------------------------------------------------------------

LsPage.createPage();

LsSelect
LsTable
LsTabs

LsForm.createForm();
FormItems


LineAndBar
	title
	
	xUnit
	yUnit
	
	x2Unit
	y2Unit

	xField
	x2Field
	
	draw
		[field: {
			type = line
			x2 = false
			y2 = false
		}]
	
	
Scatter
	title
	
	xField
	yField

	colorField
	shapeField
	
	xUnit
	yUnit
	
VsPie
	props
		[
			{label: value}
			{label: value}
		]
PercentPie
		{
			label
			value
			totalLabel
			totalValue
		}

LegendPie
	props
		[
			{label: value}
			{label: value}
		]
	legendPosition

Tops
	valueField
	labelField
	tooltipFormat
	labelFormat
	minLine
	maxLine
	highLight

Radar

Alarm
	value
	label
	color
	
TagsCould

BMap

	props
		markers
		areas
		
		onClickMarker
		onClickArea
		
	public
		showInfoWindow

